---
version: 2.1

orbs:
  terraform: twdps/terraform@0.6.0
  kube: twdps/kube-ops@0.3.0
  op: twdps/onepassword@1.0.0
  do: twdps/pipeline-events@0.1.0

# ==== global pipeline parameters

parameters:
  context:
    description: circleci context for all jobs
    type: string
    default: cohorts
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.3.3"
  executor-image:
    description: image to use for terraform runs
    type: string
    default: twdps/circleci-kube-ops:alpine-0.8.0

# ==== triggers

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster name to use for configuration
        type: string
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    steps:
      - op/env:
          env-file: << parameters.source-env >>
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: |
            op inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json

  set-kubeconfig:
    parameters:
      cluster:
        description: cluster name to use for configuration
        type: string
    steps:
      - run:
          name: setup kubeconfig
          command: |
            mkdir -p ~/.kube
            ENV=<< parameters.cluster >> op inject -i tpl/kubeconfig.tpl -o ~/.kube/config

  taint-node-group:
    description: apply node taint for automatic lastest eks-optimized-al2 managed node ami updates
    parameters:
      node-group:
        type: string
    steps:
      - run:
          name: set terraform taint on managed node group to cause new node template with latest ami version
          command: terraform taint "module.eks.module.node_groups.aws_eks_node_group.workers[\"<< parameters.node-group >>\"]"
          # eks module 18 version: terraform taint "module.eks.module.eks_managed_node_group[\"<< parameters.node-group >>\"].aws_eks_node_group.this[0]"
          # eks module 17 version: terraform taint "module.eks.module.node_groups.aws_eks_node_group.workers[\"<< parameters.node-group >>\"]"

  store-system-credentials:
    parameters:
      cluster:
        type: string
    steps:
      - run:
          name: write cluster oidc-assume-role kubeconfig
          command: bash scripts/write_cluster_credentials.sh << parameters.cluster >>

jobs:

  # Can use this post-terraform-configuration to increase WARM_IP_TARGET if orchestrator seems to be slow assigning IPs
  # WARM_IP_TARGET now defaults to 1.

  # post-terraform-configuration:
  #   parameters:
  #     cluster:
  #       description: cluster being validated
  #       type: string
  #   docker:
  #     - image: << pipeline.parameters.executor-image >>
  #   shell: << pipeline.parameters.shell-options >>
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - set-environment:
  #         cluster: << parameters.cluster >>
  #     - set-kubeconfig:
  #         cluster: << parameters.cluster >>
  #     - run:
  #         name: configure ENI environment parameters
  #         command: kubectl set env ds aws-node -n kube-system WARM_IP_TARGET=15
  #     - run:
  #         name: rolling restart of aws-node to use environment parameters
  #         command: kubectl rollout restart ds aws-node -n kube-system

  validate-eks:
    parameters:
      cluster:
        description: cluster being validated
        type: string
      shell:
        description: shell options
        type: string
        default: /bin/bash -eo pipefail
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << parameters.shell >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: smoketest eks control plane
          environment:
            TEST_ENV: << parameters.cluster >>
          command: bash scripts/validate_control_plane.sh << parameters.cluster >>
      - run:
          name: smoketest eks addons
          command: bash scripts/validate_addons.sh << parameters.cluster >>
      - kube/cis-benchmarks:
          benchmark: eks
          namespace: default

 # compare desired eks component verions with current release versions
  version-check:
    parameters:
      cluster:
        description: cluster being checked
        type: string
      shell:
        description: shell options
        type: string
        default: /bin/bash -eo pipefail
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << parameters.shell >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: validate addon and managed node group ami versions
          command: bash scripts/check_eks_and_addon_versions.sh << parameters.cluster >>

 # update cluster specific monitors
  # update-monitors:
  #   parameters:
  #     cluster:
  #       description: cluster monitors to update
  #       type: string
  #     shell:
  #       description: shell options
  #       type: string
  #       default: /bin/bash -eo pipefail
  #     source-env:
  #       description: .env file to source into BASH_ENV
  #       type: string
  #   docker:
  #     - image: << pipeline.parameters.executor-image >>
  #   shell: << parameters.shell >>
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - set-environment:
  #         source-env: << parameters.source-env >>
  #         cluster: << parameters.cluster >>
  #     - run:
  #         name: install requirements
  #         command: pip install -r requirements.txt

  # update multi-cluster dashboard. Only needs to deploy once for many envs.
  # update-dashboard:
  #   parameters:
  #     shell:
  #       description: shell options
  #       type: string
  #       default: /bin/bash -eo pipefail
  #   docker:
  #     - image: << pipeline.parameters.executor-image >>
  #   shell: << parameters.shell >>
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - set-environment:
  #         source-env: op.nonprod.env
  #         cluster: nonprod-us-east-2
  #     - run:
  #         name: install requirements
  #         command: pip install -r requirements.txt

  # replace the oldest 1/4 of the nodes in the cluster
  replace-nodes:
    parameters:
      cluster:
        description: cluster being validated
        type: string
      shell:
        description: shell options
        type: string
        default: /bin/bash -eo pipefail
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << parameters.shell >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: replace the oldest 1/4 of the nodes in the clister
          command: bash scripts/replace_nodes.sh << parameters.cluster >>

workflows:
  version: 2

  deploy eks-base to nonprod-us-east-2:
    jobs:
      - terraform/plan:
          name: nonprod-us-east-2 change plan
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod-us-east-2
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: nonprod-us-east-2
                source-env: op.nonprod.env
          filters: *on-push-main

      - approve nonprod-us-east-2 changes:
          type: approval
          requires:
            - nonprod-us-east-2 change plan
          filters: *on-push-main

      - terraform/apply:
          name: apply nonprod-us-east-2 changes
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod-us-east-2
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: nonprod-us-east-2
                source-env: op.nonprod.env
          after-terraform-init:
            - taint-node-group:
                node-group: group-a
          after-terraform:
            - store-system-credentials:
                cluster: nonprod-us-east-2
            - kube/packages:
                use-sudo: true
                kubectl-version: 1.23.5
            - run:
                name: create lab-system namespace
                command: |
                  export KUBECONFIG=kubeconfig_nonprod-us-east-2
                  kubectl apply -f lab-system-namespace.yaml
          requires:
            - approve nonprod-us-east-2 changes
          filters: *on-push-main

      - validate-eks:
          name: validate nonprod-us-east-2 eks cluster
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          source-env: op.nonprod.env
          cluster: nonprod-us-east-2
          requires:
            - apply nonprod-us-east-2 changes
          filters: *on-push-main

  # release eks-base to prod-us-east-1:
  #   jobs:
  #     - terraform/plan:
  #         name: prod-us-east-1 change plan
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         workspace: prod-us-east-1
  #         terraform-version: << pipeline.parameters.terraform-version >>
  #         before-terraform:
  #           - set-environment:
  #               cluster: prod-us-east-1
  #               source-env: op.prod.env
  #         filters: *on-tag-main

  #     - approve prod-us-east-1 changes:
  #         type: approval
  #         requires:
  #           - prod-us-east-1 change plan
  #         filters: *on-tag-main

  #     - terraform/apply:
  #         name: apply prod-us-east-1 changes
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         workspace: prod-us-east-1
  #         terraform-version: << pipeline.parameters.terraform-version >>
  #         before-terraform:
  #           - set-environment:
  #               cluster: prod-us-east-1
  #               source-env: op.prod.env
  #         after-terraform-init:
  #           - taint-node-group:
  #               node-group: group-a
  #         after-terraform:
  #           - store-system-credentials:
  #               cluster: prod-us-east-1
  #           - kube/packages:
  #               use-sudo: true
  #               kubectl-version: 1.23.5
  #           - run:
  #               name: create lab-system namespace
  #               command: |
  #                 export KUBECONFIG=kubeconfig_prod-us-east-1
  #                 kubectl apply -f lab-system-namespace.yaml
  #         requires:
  #           - approve prod-us-east-1 changes
  #         filters: *on-tag-main

  #     - validate-eks:
  #         name: validate prod-us-east-1 eks cluster
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         source-env: op.prod.env
  #         cluster: prod-us-east-1
  #         requires:
  #           - apply prod-us-east-1 changes
  #         filters: *on-tag-main

  # generate release notes:
  #   jobs:
  #     - executor-tools/release:
  #         name: generate release notes for eks-base production release
  #         context: << pipeline.parameters.context >>
  #         shell: << pipeline.parameters.shell-options >>
  #         on-tag: true
  #         filters: *on-tag-main

  # update monitors:
  #   jobs:
  #     - update-monitors:
  #         name: update nonprod-us-east-2 monitors
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
  #         source-env: op.nonprod.env
  #         cluster: nonprod-us-east-2
  #         filters: *on-push-main

  #     - approve prod-us-east-1 monitors:
  #         type: approval
  #         requires:
  #           - update nonprod-us-east-2 monitors
  #         filters: *on-push-main

  #     - update-monitors:
  #         name: update prod-us-east-1 monitors
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         source-env: op.prod.env
  #         cluster: prod-us-east-1
  #         requires:
  #           - approve prod-us-east-1 monitors
  #         filters: *on-push-main

  # update dashboard:
  #   jobs:
  #     - update-dashboard:
  #         name: update dashboard
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         filters: *on-push-main

  nightly-node-replacements:
    triggers:
      - schedule:
          cron: "0 3 * * 1-4"
          filters:
            branches:
              only:
                - main
    jobs:
      - replace-nodes:
          name: nightly node replacement job on nonprod-us-east-2
          context: << pipeline.parameters.context >>
          cluster: nonprod-us-east-2
          source-env: op.nonprod.env
      # - replace-nodes:
      #     name: nightly node replacement job on prod-us-east-1
      #     context: << pipeline.parameters.context >>
      #     cluster: prod-us-east-1
      #     source-env: op.prod.env
      #     requires:
      #       - nightly node replacement job on nonprod-us-east-2


  # perform the pipeline health checks and compare desired eks component verions with current release versions
  nightly-validation:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      # - update-dashboard:
      #     name: update dashboard
      #     shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
      #     context: << pipeline.parameters.context >>
      - validate-eks:
          name: validate nonprod-us-east-2 eks cluster
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          source-env: op.nonprod.env
          cluster: nonprod-us-east-2
      # - validate-eks:
      #     name: validate prod-us-east-1 eks cluster
      #     context: << pipeline.parameters.context >>
      #     shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
      #     source-env: op.prod.env
      #     cluster: prod-us-east-1
